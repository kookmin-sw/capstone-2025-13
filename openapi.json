{
  "openapi": "3.1.0",
  "info": {
    "title": "Wuung API Server",
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://wuung.mori.space"
    },
    {
      "url": "https://wuung-frontend.mori.space"
    }
  ],
  "security": [
    {
      "api token": []
    }
  ],
  "tags": [
    {
      "name": "Record API",
      "description": "\n    [en] Record management endpoints\n    [ko] 기록 관리 엔드포인트\n"
    },
    {
      "name": "etc API",
      "description": "\n    [En] Support convenience for Front End Side\n    AccessToken is required for all of this part of endpoints on Authorization header.\n    [Kr] 프론트 엔드를 위한 편의성 지원용 API\n    해당 API를 사용하기 위해서는 Authorization 헤더에 AccessToken을 명시해야합니다.\n"
    },
    {
      "name": "Diagnosis API",
      "description": "\n    [EN] Endpoints for Diagnosis create and read data.\n    AccessToken is required for all of this part of endpoints on Authorization header.\n    \n    [KR] 진단 생성 및 읽기를 위한 엔드포인트입니다.\n    모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n"
    },
    {
      "name": "Topic API",
      "description": "\n    [en] API endpoints for managing daily topics and their AI-generated feedback\n    [ko] 1일 1주제 기록 및 AI 생성 피드백을 관리하기 위한 API 엔드포인트\n"
    },
    {
      "name": "Quests API",
      "description": "\n    [en] Endpoints for quests.\n    AccessToken is required for all of this part of endpoints on Authorization header.\n    \n    [ko] 퀘스트 관련 엔드포인트입니다.\n    모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n"
    },
    {
      "name": "Pot API",
      "description": "\n    [en]\n    API endpoints for managing plant pot status and coupon operations.\n    These endpoints allow users to check their pot's status, get new coupons, and use coupons for experience points.\n    All endpoints require user authentication.\n    \n    [ko]\n    화분 상태 및 쿠폰 작업을 관리하기 위한 API 엔드포인트입니다.\n    사용자가 화분 상태를 확인하고, 새로운 쿠폰을 받고, 경험치를 위해 쿠폰을 사용할 수 있습니다.\n    모든 엔드포인트는 사용자 인증이 필요합니다.\n"
    },
    {
      "name": "Auth API",
      "description": "\n    [en]\n    Endpoints for authentication and token management.\n    Tokens are valid for 15 minutes.\n    Refreshed tokens will be invalidated for the previous token.\n    The refresh token can be used to obtain new access tokens until they expire.\n    AccessToken is required for protected endpoints on Authorization header.\n    \n    [ko]\n    인증 및 토큰 관리를 위한 엔드포인트입니다.\n    토큰은 15분간 유효합니다.\n    새로고침된 토큰은 이전 토큰을 무효화합니다.\n    리프레시 토큰은 만료될 때까지 새로운 액세스 토큰을 얻는 데 사용할 수 있습니다.\n    보호된 엔드포인트에는 Authorization 헤더에 AccessToken이 필요합니다.\n"
    }
  ],
  "paths": {
    "/topic/feedback/{topicId}": {
      "put": {
        "tags": [
          "Topic API"
        ],
        "summary": "Request AI feedback",
        "description": "\n        [en] Initiates an AI feedback request for a specific topic. The feedback process runs asynchronously and updates the feedback status accordingly\n        [ko] 특정 기록에 대한 AI 피드백 요청을 시작합니다. 피드백 프로세스는 비동기적으로 실행되며 피드백 상태가 그에 따라 업데이트됩니다, 피드백의 개수가 5개 이상일 경우, 피드백을 받지 않는 사용자 데이터 저장 용도의 레코드를 생성합니다.\n    ",
        "operationId": "updateFeedbackStatus",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Feedback request successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Limit Reached, Feedback can't add",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Feedback topic not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "AI feedback is still processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "412": {
            "description": "AI feedback already completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "AI feedback processing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Topic API"
        ],
        "summary": "Update feedback topic",
        "description": "\n        [en] Updates the data and user comments of a completed feedback topic. Only the topic owner can update their topics feedbacks. Only applies to COMPLETED feedback topics.\n        [ko] 완료된 피드백 기록의 데이터와 사용자 댓글을 업데이트합니다. 레코드의 주인만 레코드의 피드백을 수정할 수 있습니다. 마지막 요청이 COMPLETED 상태인 피드백에만 적용 가능합니다.\n    ",
        "operationId": "updateFeedback",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFeedbackRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update feedback successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTopicDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "No Feedback record can't update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Feedback topic not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "AI feedback is still processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "AI feedback processing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/topic/create": {
      "put": {
        "tags": [
          "Topic API"
        ],
        "summary": "Create new topic",
        "description": "\n        [en] Creates a new daily topic with emotional rate and content. Only one topic per day is allowed. Requires valid access token in Authorization header\n        [ko] 감정 수치와 내용이 포함된 새로운 일일 기록을 생성합니다. 하루에 한 개의 기록만 허용됩니다. Authorization 헤더에 유효한 접근 토큰이 필요합니다\n    ",
        "operationId": "createTopic",
        "responses": {
          "200": {
            "description": "Create topic successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTopicDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "Topic already created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/records/create": {
      "put": {
        "tags": [
          "Record API"
        ],
        "summary": "[en] Create new record\n[ko] 새로운 기록 생성",
        "description": "[en] Create a new record with data\n[ko] 데이터로 새로운 기록을 생성합니다",
        "operationId": "createRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "[en] Successfully created record\n[ko] 기록 생성 성공",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTORecordDTO"
                }
              }
            }
          },
          "403": {
            "description": "[en] Unauthorized access\n[ko] 권한 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests": {
      "put": {
        "tags": [
          "Quests API"
        ],
        "summary": "Create a new quest",
        "description": "\n            [en] Creates a new quest instance for the authenticated user.\n            Required parameter is quest (unique) id.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n            \n            [ko] 인증된 사용자를 위한 새로운 퀘스트 요소를 생성합니다.\n            필수 파라미터는 퀘스트 (고유) ID입니다.\n            모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "createQuests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created quest",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quests API"
        ],
        "summary": "Update quest progress",
        "description": "\n            [en] Updates the progress of a quest for the authenticated user.\n            Required parameter is quest (unique) id.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n            \n            [ko] 인증된 사용자의 퀘스트 진행 상황을 업데이트합니다.\n            필수 파라미터는 퀘스트 (고유) ID입니다.\n            모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "updateQuests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated quest",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/photo/{userQuestID}": {
      "put": {
        "tags": [
          "Quests API"
        ],
        "summary": "Upload quest photo",
        "description": "\n            [en] Upload a photo for a specific quest.\n            AccessToken is required on Authorization header.\n            \n            [ko] 특정 퀘스트에 사진을 업로드합니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "uploadQuestPhoto",
        "parameters": [
          {
            "name": "userQuestID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully uploaded photo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Quests API"
        ],
        "summary": "Delete quest photo",
        "description": "\n            [en] Delete the photo of a specific quest.\n            AccessToken is required on Authorization header.\n            \n            [ko] 특정 퀘스트의 사진을 삭제합니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "deleteQuestPhoto",
        "parameters": [
          {
            "name": "userQuestID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted photo",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/submit": {
      "put": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Submit diagnosis result / 진단 결과 제출",
        "description": "\n            [EN] Submit a new diagnosis result for the authenticated user.\n            AccessToken is required for this part of endpoints on Authorization header.\n            \n            [KR] 인증된 사용자의 새로운 진단 결과를 제출합니다.\n            이 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "putDiagnosis",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagnosisResultSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully submitted diagnosis result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTODiagnosisResultDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Diagnosis not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/profile": {
      "put": {
        "tags": [
          "Auth API"
        ],
        "summary": "Update user profile image / 사용자 프로필 이미지 업데이트",
        "description": "\n            [en]\n            Updates the user's profile image. The image will be uploaded to S3 storage.\n            The response will include the updated user's information including the new profile image URL.\n            Maximum file size is 5MB and only image files (jpg, jpeg, png) are allowed.\n            This endpoint is protected and requires a valid access token.\n    \n            [ko]\n            사용자의 프로필 이미지를 업데이트합니다. 이미지는 S3 저장소에 업로드됩니다.\n            응답에는 새 프로필 이미지 URL을 포함한 업데이트된 사용자 정보가 포함됩니다.\n            최대 파일 크기는 5MB이며 이미지 파일(jpg, jpeg, png)만 허용됩니다.\n            이 엔드포인트는 보호되어 있으며 유효한 액세스 토큰이 필요합니다.\n        ",
        "operationId": "updateProfile",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "multipartFile": {
                    "type": "string",
                    "format": "binary",
                    "description": "Profile image file to be uploaded"
                  }
                },
                "required": [
                  "multipartFile"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated profile image",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserInfoDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file format or size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Auth API"
        ],
        "summary": "Delete user profile image / 사용자 프로필 이미지 삭제",
        "description": "\n            [en]\n            Deletes the user's profile image from S3 storage(or compatible storage)\n            and removes the profile image reference.\n            The response will include the updated user's information with no profile image.\n            This endpoint is protected and requires a valid access token.\n    \n            [ko]\n            S3 저장소(또는 호환 가능한 저장소)에서 사용자의 프로필 이미지를 삭제하고\n            프로필 이미지 참조를 제거합니다.\n            응답에는 프로필 이미지가 없는 업데이트된 사용자 정보가 포함됩니다.\n            이 엔드포인트는 보호되어 있으며 유효한 액세스 토큰이 필요합니다.\n        ",
        "operationId": "deleteProfile",
        "responses": {
          "200": {
            "description": "Successfully deleted profile image",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserInfoDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/topic/modify/{topicId}": {
      "post": {
        "tags": [
          "Topic API"
        ],
        "summary": "Modify existing topic information",
        "description": "\n            [en] Updates the emotional rate and content data of an existing topic. Only the topic owner can modify their topics\n            [ko] 기존 기록의 감정 수치와 내용을 수정합니다. 기록 소유자만 수정할 수 있습니다\n        ",
        "operationId": "modifyTopic",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Update topic successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTopicDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/records/{recordId}": {
      "get": {
        "tags": [
          "Record API"
        ],
        "summary": "[en] Get record by ID\n[ko] ID별 기록 조회",
        "description": "[en] Get a specific record by its ID\n[ko] ID로 특정 기록을 조회합니다",
        "operationId": "getRecordById",
        "parameters": [
          {
            "name": "recordId",
            "in": "query",
            "description": "Record ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Record ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[en] Successfully retrieved record\n[ko] 기록 조회 성공",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTORecordDTO"
                }
              }
            }
          },
          "403": {
            "description": "[en] Unauthorized access\n[ko] 권한 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "[en] Record not found\n[ko] 기록을 찾을 수 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Record API"
        ],
        "summary": "[en] Update final record feedback\n[ko] 기록 최종 수정",
        "description": "[en] Update final feedback (rate and comment) after Lucky Vicky AI processing is completed\n[ko] 기존 기록에서 럭키비키가 완료되었을 때 최종 데이터를 집어넣는 엔드포인트입니다.",
        "operationId": "modifyRecord",
        "parameters": [
          {
            "name": "recordId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "[en] Successfully updated record feedback\n[ko] 기록 수정 성공",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTORecordDTO"
                }
              }
            }
          },
          "403": {
            "description": "[en] Unauthorized access\n[ko] 권한 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "[en] Record not found\n[ko] 기록을 찾을 수 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/stage": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get quest stages",
        "description": "\n            [en] Get all quest stages for the authenticated user.\n            AccessToken is required on Authorization header.\n\n            [ko] 인증된 사용자의 모든 퀘스트 스테이지를 가져옵니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getQuestStages",
        "responses": {
          "200": {
            "description": "Successfully retrieved quest stages",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListUserQuestStagesDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quests API"
        ],
        "summary": "Increment all quests circular",
        "description": "\n        [en] Increment all quest circular by 1 for the authenticated user.\n        AccessToken is required on Authorization header.\n        \n        [ko] 인증된 사용자의 모든 퀘스트 서큘러값을 1씩 증가시킵니다.\n        Authorization 헤더에 AccessToken이 필요합니다.\n    ",
        "operationId": "incrementAllStages",
        "responses": {
          "200": {
            "description": "update quest circular successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/stage/{type}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get quest stage by type",
        "description": "\n            [en] Get quest stage for specific type.\n            AccessToken is required on Authorization header.\n            \n            [ko] 특정 타입의 퀘스트 스테이지를 가져옵니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getQuestStageByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quest stage",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOInteger"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest stage not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quests API"
        ],
        "summary": "Increment quest circular specific type by 1",
        "description": "\n        [en] Increment quest circular count by 1 for specific type.\n        AccessToken is required on Authorization header.\n        \n        [ko] 특정 타입의 퀘스트 서큘러 값을 1 증가시킵니다.\n        Authorization 헤더에 AccessToken이 필요합니다.\n    ",
        "operationId": "incrementStageByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "update quest circular successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Stage not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pot/usecoupon": {
      "post": {
        "tags": [
          "Pot API"
        ],
        "summary": "[en] use a coupon [ko] 하나의 쿠폰 사용",
        "description": "\n        [en]\n        Uses one coupon to gain experience points. If experience points reach the required amount,\n        the pot will level up and experience points will be reset to 0.\n        This endpoint is protected and requires authentication.\n        \n        [ko]\n        쿠폰 하나를 사용하여 경험치를 획득합니다. 경험치가 필요량에 도달하면\n        화분의 레벨이 올라가고 경험치가 0으로 초기화됩니다.\n        개발자가 정의한 레벨을 초과한 레벨업 시도시 상태값 445를 반환합니다.\n        이 엔드포인트는 보호되어 있으며 사용을 위해서 accessToken이 필요합니다.\n    ",
        "operationId": "useCoupon",
        "responses": {
          "200": {
            "description": "use coupon successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOPotStatusDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "pot not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "444": {
            "description": "Not enough coupon",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "445": {
            "description": "Max level reached",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pot/getcoupon": {
      "post": {
        "tags": [
          "Pot API"
        ],
        "summary": "[en] increase coupon [ko] 새로운 쿠폰 획득",
        "description": "\n        [en]\n        Adds one coupon to user's pot and returns the updated pot status.\n        This endpoint is protected and requires authentication.\n        \n        [ko]\n        사용자의 화분에 쿠폰 하나를 추가하고 업데이트된 화분 상태를 반환합니다.\n        이 엔드포인트는 보호되어 있으며 사용을 위해서 accessToken이 필요합니다.\n    ",
        "operationId": "getCoupon",
        "responses": {
          "200": {
            "description": "get coupon successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOPotStatusDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "pot not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/update": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Update user information / 사용자 정보 업데이트",
        "description": "\n            [en]\n            Updates user information. Null fields will be ignored.\n            The response will include the updated user's email, username, gender, and birth date.\n            The user's information will be updated in the database.\n            This endpoint is protected and requires a valid access token.\n    \n            [ko]\n            사용자 정보를 업데이트합니다. Null 필드는 무시됩니다.\n            응답에는 업데이트된 사용자의 이메일, 사용자 이름, 성별 및 생년월일이 포함됩니다.\n            사용자 정보가 데이터베이스에서 업데이트됩니다.\n            이 엔드포인트는 보호되어 있으며 유효한 액세스 토큰이 필요합니다.\n        ",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated user information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUpdateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Sign up new user and generate new tokens / 새 사용자 가입 및 토큰 생성",
        "description": "\n            [en]\n            Create new user provided credentials with additional fields and generate tokens for access.\n            Tokens are valid for 15 minutes.\n            The refresh token can be used to obtain new access tokens until they expire.\n            This endpoint is not protected and can be used by unauthenticated clients.\n    \n            [ko]\n            추가 필드와 함께 제공된 자격 증명으로 새 사용자를 생성하고 액세스용 토큰을 생성합니다.\n            토큰은 15분간 유효합니다.\n            리프레시 토큰은 만료될 때까지 새로운 액세스 토큰을 얻는 데 사용할 수 있습니다.\n            이 엔드포인트는 보호되지 않으며 인증되지 않은 클라이언트가 사용할 수 있습니다.\n        ",
        "operationId": "signUpUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "sign up user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOSignUpResponse"
                }
              }
            }
          },
          "409": {
            "description": "sign up failed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Refresh JWT tokens / JWT 토큰 새로고침",
        "description": "\n        [en]\n        Generates new access and refresh tokens from a valid refresh token.\n        Tokens are valid for 15 minutes.\n        The refresh token can be used to obtain new access tokens until they expire.\n        This endpoint is not protected and can be used by unauthenticated clients.\n    \n        [ko]\n        유효한 리프레시 토큰으로 새로운 액세스 및 리프레시 토큰을 생성합니다.\n        토큰은 15분간 유효합니다.\n        리프레시 토큰은 만료될 때까지 새로운 액세스 토큰을 얻는 데 사용할 수 있습니다.\n        이 엔드포인트는 보호되지 않으며 인증되지 않은 클라이언트가 사용할 수 있습니다.\n    ",
        "operationId": "refreshToken",
        "requestBody": {
          "description": "Refresh token to generate new tokens",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed tokens",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTokenRefreshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired refresh token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Logout user / 사용자 로그아웃",
        "description": "\n        [en]\n        Invalidates refresh tokens for the user. The user will need to authenticate again to obtain new tokens.\n        This endpoint is protected and requires a valid access token.\n    \n        [ko]\n        사용자의 리프레시 토큰을 무효화합니다. 사용자는 새로운 토큰을 얻기 위해 다시 인증해야 합니다.\n        이 엔드포인트는 보호되어 있으며 유효한 액세스 토큰이 필요합니다.\n    ",
        "operationId": "logoutUser",
        "requestBody": {
          "description": "Refresh token to invalidate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Authenticate user and generate JWT tokens / 사용자 인증 및 JWT 토큰 생성",
        "description": "\n        [en]\n        Validates user credentials and provides access and refresh tokens.\n        Tokens are valid for 15 minutes.\n        Refreshed tokens will be invalidated for the previous token.\n        The refresh token can be used to obtain new access tokens until they expire.\n        This endpoint is not protected and can be used by unauthenticated clients.\n   \n        [ko]\n        사용자 자격 증명을 검증하고 액세스 및 리프레시 토큰을 제공합니다.\n        토큰은 15분간 유효합니다.\n        새로고침된 토큰은 이전 토큰을 무효화합니다.\n        리프레시 토큰은 만료될 때까지 새로운 액세스 토큰을 얻는 데 사용할 수 있습니다.\n        이 엔드포인트는 보호되지 않으며 인증되지 않은 클라이언트가 사용할 수 있습니다.\n    ",
        "operationId": "authenticateUser",
        "requestBody": {
          "description": "Email and password for authentication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/topic/{topicId}": {
      "get": {
        "tags": [
          "Topic API"
        ],
        "summary": "Get all feedback topic",
        "description": "\n        [en] Retrieves all completed AI feedback topics associated with a specific topic. Only shows feedback with COMPLETED status\n        [ko] 특정 기록과 관련된 모든 피드백을 조회합니다. COMPLETED 상태의 피드백과 NOFEEDBACK 상태의 피드백도 표시됩니다\n    ",
        "operationId": "getFeedbacks",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get feedback topics successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListTopicFeedbackDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Topic not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/topic/me": {
      "get": {
        "tags": [
          "Topic API"
        ],
        "summary": "Get topic information for a specific date",
        "description": "\n        [en] Retrieves the most recent topic for a specific date, including topic ID, emotional rate, and content data. Defaults to the current date if no date is specified.\n        [ko] 특정 날짜의 가장 최근 기록을 조회합니다. 기록 ID, 감정 수치, 내용 데이터를 포함합니다. 기본 값은 오늘 입니다.\n    ",
        "operationId": "getTopicByDate",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date in format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Date in format yyyy-MM-dd",
              "example": "2025-05-01"
            },
            "example": "2025-05-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Get topic successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTopicDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/topic/feedback/{topicFeedbackId}": {
      "get": {
        "tags": [
          "Topic API"
        ],
        "summary": "Get feedback topic",
        "description": "\n        [en] Retrieves detailed information about a specific feedback topic, including AI feedback content and user comments\n        [ko] 특정 피드백 기록의 상세 정보를 조회합니다. AI 피드백 내용과 사용자 댓글을 포함합니다.\n    ",
        "operationId": "getFeedback",
        "parameters": [
          {
            "name": "topicFeedbackId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get feedback topic successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTopicFeedbackDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Feedback topic not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "409": {
            "description": "AI feedback is still processing",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "AI feedback processing error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/records/me": {
      "get": {
        "tags": [
          "Record API"
        ],
        "summary": "[en] Get record by date\n[ko] 날짜별 기록 조회",
        "description": "[en] Get a user's record for a specific date\n[ko] 특정 날짜의 사용자 기록을 조회합니다",
        "operationId": "getRecordByDate",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "[en] Date in format yyyy-MM-dd\n[ko] 날짜 형식 yyyy-MM-dd",
            "required": true,
            "schema": {
              "type": "string",
              "description": "[en] Date in format yyyy-MM-dd\n[ko] 날짜 형식 yyyy-MM-dd",
              "example": "2025-05-01"
            },
            "example": "2025-05-01"
          }
        ],
        "responses": {
          "200": {
            "description": "[en] Successfully retrieved record\n[ko] 기록 조회 성공",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "[en] Unauthorized access\n[ko] 권한 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "[en] Record not found\n[ko] 기록을 찾을 수 없음",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/quote": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get random life quote",
        "description": "\n            [en] Get a random life quote from the database.\n            AccessToken is required on Authorization header.\n            \n            [ko] 데이터베이스에서 랜덤한 명언을 조회합니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getRandomQuote",
        "responses": {
          "200": {
            "description": "return life quotes successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/me": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get my quests",
        "description": "\n            [en] Get my quests with optional filter by start date.\n            Start date is in format yyyy-MM-dd.\n            If start date is not provided, it will return all quests.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n            \n            [ko] 시작 날짜로 필터링 할 수 있는 내 퀘스트 목록을 가져옵니다.\n            시작 날짜는 yyyy-MM-dd 형식입니다.\n            시작 날짜가 제공되지 않으면 모든 퀘스트를 반환합니다.\n            모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getQuests",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start date in format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start date in format yyyy-MM-dd",
              "example": "2000-01-01"
            },
            "example": "2000-01-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List all quests",
        "description": "\n            [en] Get a list of all available quests.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n            \n            [ko] 사용 가능한 모든 퀘스트 목록을 가져옵니다.\n            모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "listQuests",
        "responses": {
          "200": {
            "description": "Successfully retrieved quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list/{type}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List quests by type",
        "description": "\n           [en] Get a list of quests filtered by type.\n           AccessToken is required for all of this part of endpoints on Authorization header.\n           \n           [ko] 유형별로 필터링된 퀘스트 목록을 가져옵니다.\n           모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "listQuestsWithTypes",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of quest",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of quest",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ],
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list/{type}/{step}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List quests by type and step",
        "description": "\n            [en] Get a list of quests filtered by type and step number.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n            \n            [ko] 유형과 단계 번호로 필터링된 퀘스트 목록을 가져옵니다.\n            모든 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "listQuestsWithTypes_1",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of quest",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of quest",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ],
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          },
          {
            "name": "step",
            "in": "path",
            "description": "Step of quest type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "description": "Step of quest type",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/last": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get current quests",
        "description": "\n            [en] Get all current quests in progress.\n            AccessToken is required on Authorization header.\n            \n            [ko] 현재 진행 중인 모든 퀘스트를 가져옵니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getCurrentQuests",
        "responses": {
          "200": {
            "description": "Successfully retrieved current quests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOMapQuestTypeUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/last/{type}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get current quest by type",
        "description": "\n            [en] Get current quest in progress for specific type.\n            AccessToken is required on Authorization header.\n            \n            [ko] 특정 타입의 현재 진행 중인 퀘스트를 가져옵니다.\n            Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getCurrentQuestByType",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current quest",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "No current quest found for given type",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/pot/status": {
      "get": {
        "tags": [
          "Pot API"
        ],
        "summary": "[en] get pot status [ko] 화분 상태 조회",
        "description": "\n        [en]\n        Retrieves the current status of user's plant pot including level, experience points, and coupon count.\n        This endpoint is protected and requires authentication.\n        \n        [ko]\n        사용자 화분의 현재 상태(레벨, 경험치, 쿠폰 개수 등)를 조회합니다.\n        이 엔드포인트는 보호되어 있으며 사용을 위해서 accessToken이 필요합니다.\n    ",
        "operationId": "getPotStatus",
        "responses": {
          "200": {
            "description": "get pot status successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOPotStatusDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "pot not found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/etc/behavior": {
      "get": {
        "tags": [
          "etc API"
        ],
        "summary": "[En] Get User behavior information by date / [Kr] 특정 날짜의 사용자 활동 정보 조회",
        "description": "\n            [En] Returns a list of user activities including diagnosis tests, diaries and quests completed on a specific date.\n            The date parameter should be in yyyy-MM-dd format.\n            [Kr] 특정 날짜에 수행한 검사, 일기 작성, 퀘스트 완료 등의 사용자 활동 목록을 반환합니다.\n            날짜 파라미터는 yyyy-MM-dd 형식이어야 합니다.\n        ",
        "operationId": "getBehaviorByDate",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\n                    [En] Successfully retrieved user behavior information for the specified date\n                    [Kr] 지정된 날짜의 사용자 활동 정보를 성공적으로 조회했습니다\n                ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListDailyBehaviorDTO"
                }
              }
            }
          },
          "403": {
            "description": "\n                    [En] Unauthorized access - Valid authentication token required\n                    [Kr] 인증되지 않은 접근 - 유효한 인증 토큰이 필요합니다\n                ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/etc/behavior/summary": {
      "get": {
        "tags": [
          "etc API"
        ],
        "summary": "[En] Get User behavior summary by month / [Kr] 월별 사용자 활동 요약 조회",
        "description": "\n            [En] Returns a list of dates in the specified month where the user had any activity (diagnosis tests or diary entries).\n            The date parameter should be in yyyy-MM format.\n            [Kr] 지정된 달에 사용자가 활동(검사 또는 일기 작성)을 한 날짜 목록을 반환합니다.\n            날짜 파라미터는 yyyy-MM 형식이어야 합니다.\n        ",
        "operationId": "getBehaviorByMontly",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "\n                    [En] Successfully retrieved user behavior summary for the specified month\n                    [Kr] 지정된 월의 사용자 활동 요약을 성공적으로 조회했습니다\n                ",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListString"
                }
              }
            }
          },
          "403": {
            "description": "\n                    [En] Unauthorized access - Valid authentication token required\n                    [Kr] 인증되지 않은 접근 - 유효한 인증 토큰이 필요합니다\n                ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/{id}": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get diagnosis by ID / ID로 진단 조회",
        "description": "\n            [EN] Retrieve diagnosis details for the specified ID.\n            AccessToken is required for this part of endpoints on Authorization header.\n            \n            [KR] 지정된 ID의 진단 상세 정보를 조회합니다.\n            이 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getDiagnosis",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTODiagnosisDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Diagnosis not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/results": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get diagnosis results / 진단 결과 조회",
        "description": "\n            [EN] Retrieve diagnosis results for the authenticated user with optional date filtering.\n            AccessToken is required for this part of endpoints on Authorization header.\n            \n            [KR] 인증된 사용자의 진단 결과를 조회합니다. 선택적으로 날짜 필터링이 가능합니다.\n            이 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getDiagnosisResults",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start date in format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start date in format yyyy-MM-dd",
              "example": "2000-01-01"
            },
            "example": "2000-01-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListDiagnosisResultDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/list": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get all diagnosis list / 전체 진단 목록 조회",
        "description": "\n            [EN] Retrieve a list of all available diagnoses.\n            AccessToken is required for this part of endpoints on Authorization header.\n            \n            [KR] 사용 가능한 모든 진단 목록을 조회합니다.\n            이 엔드포인트는 Authorization 헤더에 AccessToken이 필요합니다.\n        ",
        "operationId": "getDiagnosisList",
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListDiagnosisDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Auth API"
        ],
        "summary": "Get current user's information / 현재 사용자 정보 조회",
        "description": "\n            [en]\n            Retrieves the logged-in user's information using a valid access token.\n            The user's information will be returned in the response body.\n            The response will include the user's email, roles, and username, as well as their gender and birth date.\n            This endpoint is protected and requires a valid access token.\n    \n            [ko]\n            유효한 액세스 토큰을 사용하여 로그인한 사용자의 정보를 검색합니다.\n            사용자 정보는 응답 본문에 반환됩니다.\n            응답에는 사용자의 이메일, 역할, 사용자 이름과 함께 성별과 생년월일이 포함됩니다.\n            이 엔드포인트는 보호되어 있으며 유효한 액세스 토큰이 필요합니다.\n        ",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserInfoDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/admin/export/{className}": {
      "get": {
        "tags": [
          "data-export-controller"
        ],
        "operationId": "export",
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "raw",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "otherParams",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/MultiValueMapStringString"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/admin/download/{className}/{fieldName}/{id}": {
      "get": {
        "tags": [
          "file-download-controller"
        ],
        "operationId": "serveFile",
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/admin/download/{className}/{fieldName}/{id}/image": {
      "get": {
        "tags": [
          "file-download-controller"
        ],
        "operationId": "serveImage",
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          }
        }
      }
    },
    "/admin/api/autocomplete/{className}": {
      "get": {
        "tags": [
          "autocomplete-controller"
        ],
        "operationId": "autocomplete",
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "query",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {

                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "TopicFeedbackRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        },
        "required": [
          "data"
        ]
      },
      "ApiResponseDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {

          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOString": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOTopicDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/TopicDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "TopicDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rate": {
            "type": "integer",
            "format": "int32",
            "description": "\n        [en] Rating score (1-5 stars), default value is 0 (unrated)\n        [ko] 별점 점수 (1-5점), 기본값은 0이다. (평가하지 않음)\n    ",
            "maximum": 5,
            "minimum": 1
          },
          "data": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "feedbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicFeedbackDTO"
            }
          }
        },
        "required": [
          "createdAt",
          "data",
          "feedbacks",
          "id",
          "rate",
          "updatedAt"
        ]
      },
      "TopicFeedbackDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "aiFeedback": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "PROCESSING",
              "COMPLETED",
              "NOFEEDBACK",
              "PROCESSING_ERROR"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "status",
          "updatedAt"
        ]
      },
      "CreateRecordRequest": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        },
        "required": [
          "data"
        ]
      },
      "ApiResponseDTORecordDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/RecordDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "RecordDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "rate": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "luckyVicky": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "QUEUED",
              "PROCESSING",
              "COMPLETED",
              "NOFEEDBACK",
              "PROCESSING_ERROR"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "comment",
          "createdAt",
          "data",
          "id",
          "luckyVicky",
          "rate",
          "status",
          "updatedAt"
        ]
      },
      "CreateQuestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "required": [
          "id"
        ]
      },
      "ApiResponseDTOUserQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UserQuestsDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "UserQuestsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEDITATE",
              "ACTIVITY",
              "EMOTION"
            ]
          },
          "progress": {
            "type": "integer",
            "format": "int32"
          },
          "target": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPLETED",
              "INCOMPLETE",
              "PROCESSING"
            ]
          },
          "step": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "photo": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "description",
          "id",
          "name",
          "progress",
          "status",
          "step",
          "target",
          "type",
          "updatedAt"
        ]
      },
      "DiagnosisResultSubmitRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "scale": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "id",
          "result",
          "scale"
        ]
      },
      "ApiResponseDTODiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/DiagnosisResultDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "DiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "diagnosisId": {
            "type": "integer",
            "format": "int64"
          },
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "scale": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "diagnosisId",
          "id",
          "result",
          "scale",
          "updatedAt"
        ]
      },
      "ApiResponseDTOUserInfoDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UserInfoDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "UserInfoDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "profile": {
            "type": "string"
          }
        },
        "required": [
          "birthDate",
          "createdAt",
          "email",
          "gender",
          "id",
          "roles",
          "updatedAt",
          "username"
        ]
      },
      "TopicUpdateRequest": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "integer",
            "format": "int32",
            "description": "\n        [en] Rating score (1-5 stars)\n        [ko] 별점 점수 (1-5점)\n    ",
            "maximum": 5,
            "minimum": 1
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "data",
          "rate"
        ]
      },
      "UpdateFeedbackRequest": {
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "User comment for the feedback"
          },
          "rate": {
            "type": "integer",
            "format": "int32",
            "description": "\n        [en] Rating score (1-5 stars)\n        [ko] 별점 점수 (1-5점)\n    ",
            "maximum": 5,
            "minimum": 1
          }
        },
        "required": [
          "comment",
          "rate"
        ]
      },
      "RecordUpdateRequest": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string"
          }
        },
        "required": [
          "comment",
          "rate"
        ]
      },
      "UpdateQuestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "current": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPLETED",
              "INCOMPLETE",
              "PROCESSING"
            ]
          }
        },
        "required": [
          "current",
          "id",
          "status"
        ]
      },
      "ApiResponseDTOPotStatusDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/PotStatusDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "PotStatusDTO": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "exp": {
            "type": "integer",
            "format": "int32"
          },
          "need": {
            "type": "integer",
            "format": "int32"
          },
          "coupon": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "coupon",
          "exp",
          "level",
          "need"
        ]
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birth_date": {
            "type": "string",
            "description": "Birth date in format yyyy-MM-dd",
            "example": "2000-01-01"
          }
        }
      },
      "ApiResponseDTOUpdateUserResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UpdateUserResponse"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "birthDate",
          "email",
          "gender",
          "userName"
        ]
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "user_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birth_date": {
            "type": "string",
            "description": "Birth date in format yyyy-MM-dd",
            "example": "2000-01-01"
          }
        },
        "required": [
          "birth_date",
          "email",
          "gender",
          "password",
          "user_name"
        ]
      },
      "ApiResponseDTOSignUpResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/SignUpResponse"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "SignUpResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "TokenRefreshRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "ApiResponseDTOTokenRefreshResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/TokenRefreshResponse"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "TokenRefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "ApiResponseDTOLoginResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/LoginResponse"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        },
        "required": [
          "accessToken",
          "refreshToken"
        ]
      },
      "ApiResponseDTOListTopicFeedbackDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicFeedbackDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOTopicFeedbackDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/TopicFeedbackDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOListUserQuestStagesDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserQuestStagesDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "UserQuestStagesDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEDITATE",
              "ACTIVITY",
              "EMOTION"
            ]
          },
          "stage": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "id",
          "stage",
          "type",
          "updatedAt"
        ]
      },
      "ApiResponseDTOInteger": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOListUserQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserQuestsDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOListQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestsDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "QuestsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEDITATE",
              "ACTIVITY",
              "EMOTION"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "target": {
            "type": "integer",
            "format": "int32"
          },
          "step": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "description",
          "id",
          "name",
          "step",
          "target",
          "type",
          "updatedAt"
        ]
      },
      "ApiResponseDTOQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/QuestsDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOMapQuestTypeUserQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UserQuestsDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOListDailyBehaviorDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DailyBehaviorDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "DailyBehaviorDTO": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DIARY",
              "QUEST",
              "DIAGNOSIS"
            ]
          }
        },
        "required": [
          "content",
          "title",
          "type"
        ]
      },
      "ApiResponseDTOListString": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTODiagnosisDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/DiagnosisDTO"
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "DiagnosisDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "Simple",
              "PHQ-9",
              "GAD-7",
              "BDI"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisQuestionDTO"
            }
          },
          "scale": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisScaleDTO"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "createdAt",
          "description",
          "id",
          "questions",
          "scale",
          "title",
          "type",
          "updatedAt"
        ]
      },
      "DiagnosisQuestionDTO": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisTextDTO"
            }
          }
        },
        "required": [
          "answers",
          "seq",
          "text"
        ]
      },
      "DiagnosisScaleDTO": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "scaleName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "description",
          "scaleName",
          "start"
        ]
      },
      "DiagnosisTextDTO": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        },
        "required": [
          "score",
          "text"
        ]
      },
      "ApiResponseDTOListDiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisResultDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "ApiResponseDTOListDiagnosisDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisDTO"
            }
          }
        },
        "required": [
          "code",
          "error",
          "message"
        ]
      },
      "MultiValueMapStringString": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "all": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "writeOnly": true
          },
          "empty": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "api token": {
        "type": "http",
        "name": "api token",
        "scheme": "bearer"
      }
    }
  }
}