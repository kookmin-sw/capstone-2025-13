{
  "openapi": "3.1.0",
  "info": {
    "title": "Wuung API Server",
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080"
    },
    {
      "url": "https://wuung.mori.space"
    },
    {
      "url": "https://wuung-frontend.mori.space"
    }
  ],
  "security": [
    {
      "api token": []
    }
  ],
  "tags": [
    {
      "name": "Record API",
      "description": "\n    Endpoints for records.\n    AccessToken is required for all of this part of endpoints on Authorization header.\n"
    },
    {
      "name": "Quests API",
      "description": "\n    Endpoints for quests.\n    AccessToken is required for all of this part of endpoints on Authorization header.\n"
    },
    {
      "name": "Auth API",
      "description": "\n    Endpoints for authentication and token management.\n    Tokens are valid for 15 minutes.\n    Refreshed tokens will be invalidated for the previous token.\n    The refresh token can be used to obtain new access tokens until they expire.\n    AccessToken is required for protected endpoints on Authorization header.\n"
    },
    {
      "name": "Diagnosis API",
      "description": "\n    Endpoints for Diagnosis create and read data.\n    AccessToken is required for all of this part of endpoints on Authorization header.\n"
    }
  ],
  "paths": {
    "/records/create": {
      "put": {
        "tags": [
          "Record API"
        ],
        "summary": "Create new record",
        "description": "\n        Create a new record with rate and data.\n        AccessToken is required for all of this part of endpoints on Authorization header.\n    ",
        "operationId": "createRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRecordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created record",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTORecordDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests": {
      "put": {
        "tags": [
          "Quests API"
        ],
        "summary": "Create a new quest",
        "description": "\n            Creates a new quest instance for the authenticated user.\n            Required parameter is quest (unique) id.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "createQuests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateQuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully created quest",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Quests API"
        ],
        "summary": "Update quest progress",
        "description": "\n            Updates the progress of a quest for the authenticated user.\n            Required parameter is quest (unique) id.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "updateQuests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateQuestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated quest",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Quest not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/submit": {
      "put": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Submit diagnosis result",
        "description": "\n            Submit a new diagnosis result for the authenticated user.\n            AccessToken is required for this part of endpoints on Authorization header.\n        ",
        "operationId": "putDiagnosis",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiagnosisResultSubmitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully submitted diagnosis result",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTODiagnosisResultDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Diagnosis not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/records/modify": {
      "post": {
        "tags": [
          "Record API"
        ],
        "summary": "Modify existing record",
        "description": "\n        Update rate and data of an existing record.\n        AccessToken is required for all of this part of endpoints on Authorization header.\n    ",
        "operationId": "modifyRecord",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecordUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/update": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Update user information",
        "description": "\n            Updates user information. Null fields will be ignored.\n            The response will include the updated user's email, username, gender, and birth date.\n            The user's information will be updated in the database.\n            This endpoint is protected and requires a valid access token.\n        ",
        "operationId": "updateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated user information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUpdateUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Sign up new user and generate new tokens",
        "description": "\n            Create new user provided credentials with additional fields and generate tokens for access.\n            Tokens are valid for 15 minutes.\n            The refresh token can be used to obtain new access tokens until they expire.\n            This endpoint is not protected and can be used by unauthenticated clients.\n        ",
        "operationId": "signUpUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "sign up user",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOSignUpResponse"
                }
              }
            }
          },
          "400": {
            "description": "sign up failed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Refresh JWT tokens",
        "description": "\n        Generates new access and refresh tokens from a valid refresh token.\n        Tokens are valid for 15 minutes.\n        The refresh token can be used to obtain new access tokens until they expire.\n        This endpoint is not protected and can be used by unauthenticated clients.\n    ",
        "operationId": "refreshToken",
        "requestBody": {
          "description": "Refresh token to generate new tokens",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully refreshed tokens",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOTokenRefreshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or expired refresh token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Logout user",
        "description": "\n        Invalidates refresh tokens for the user. The user will need to authenticate again to obtain new tokens.\n        This endpoint is protected and requires a valid access token.\n    ",
        "operationId": "logoutUser",
        "requestBody": {
          "description": "Refresh token to invalidate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged out",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOString"
                }
              }
            }
          },
          "400": {
            "description": "Invalid refresh token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth API"
        ],
        "summary": "Authenticate user and generate JWT tokens",
        "description": "\n        Validates user credentials and provides access and refresh tokens.\n        Tokens are valid for 15 minutes.\n        Refreshed tokens will be invalidated for the previous token.\n        The refresh token can be used to obtain new access tokens until they expire.\n        This endpoint is not protected and can be used by unauthenticated clients.\n    ",
        "operationId": "authenticateUser",
        "requestBody": {
          "description": "Email and password for authentication",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOLoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/records/me": {
      "get": {
        "tags": [
          "Record API"
        ],
        "summary": "Get record by date",
        "description": "\n        Get a user's record for a specific date.\n        AccessToken is required for all of this part of endpoints on Authorization header.\n    ",
        "operationId": "getRecordByDate",
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "description": "Date in format yyyy-MM-dd",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Date in format yyyy-MM-dd",
              "example": "2025-05-01"
            },
            "example": "2025-05-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved record",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/me": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "Get my quests",
        "description": "\n            Get my quests with optional filter by start date.\n            Start date is in format yyyy-MM-dd.\n            If start date is not provided, it will return all quests.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "getQuests",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start date in format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start date in format yyyy-MM-dd",
              "example": "2000-01-01"
            },
            "example": "2000-01-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved quests",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListUserQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List all quests",
        "description": "\n            Get a list of all available quests.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "listQuests",
        "responses": {
          "200": {
            "description": "Successfully retrieved quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list/{type}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List quests by type",
        "description": "\n           Get a list of quests filtered by type.\n           AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "listQuestsWithTypes",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of quest",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of quest",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ],
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/quests/list/{type}/{step}": {
      "get": {
        "tags": [
          "Quests API"
        ],
        "summary": "List quests by type and step",
        "description": "\n            Get a list of quests filtered by type and step number.\n            AccessToken is required for all of this part of endpoints on Authorization header.\n        ",
        "operationId": "listQuestsWithTypes_1",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of quest",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Type of quest",
              "enum": [
                "MEDITATE",
                "ACTIVITY",
                "EMOTION"
              ],
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          },
          {
            "name": "step",
            "in": "path",
            "description": "Step of quest type",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "description": "Step of quest type",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved filtered quests list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOQuestsDTO"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/{id}": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get diagnosis by ID",
        "description": "\n            Retrieve diagnosis details for the specified ID.\n            AccessToken is required for this part of endpoints on Authorization header.\n        ",
        "operationId": "getDiagnosis",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTODiagnosisDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          },
          "404": {
            "description": "Diagnosis not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/results": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get diagnosis results",
        "description": "\n            Retrieve diagnosis results for the authenticated user with optional date filtering.\n            AccessToken is required for this part of endpoints on Authorization header.\n        ",
        "operationId": "getDiagnosisResults",
        "parameters": [
          {
            "name": "start",
            "in": "query",
            "description": "Start date in format yyyy-MM-dd",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Start date in format yyyy-MM-dd",
              "example": "2000-01-01"
            },
            "example": "2000-01-01"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis results",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListDiagnosisResultDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/diagnosis/list": {
      "get": {
        "tags": [
          "Diagnosis API"
        ],
        "summary": "Get all diagnosis list",
        "description": "\n            Retrieve a list of all available diagnoses.\n            AccessToken is required for this part of endpoints on Authorization header.\n        ",
        "operationId": "getDiagnosisList",
        "responses": {
          "200": {
            "description": "Successfully retrieved diagnosis list",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOListDiagnosisDTO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing JWT token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTO"
                }
              }
            }
          }
        }
      }
    },
    "/auth/me": {
      "get": {
        "tags": [
          "Auth API"
        ],
        "summary": "Get current user's information",
        "description": "\n            Retrieves the logged-in user's information using a valid access token.\n            The user's information will be returned in the response body.\n            The response will include the user's email, roles, and username, as well as their gender and birth date.\n            This endpoint is protected and requires a valid access token.\n        ",
        "operationId": "getUserInfo",
        "responses": {
          "200": {
            "description": "Successfully retrieved user information",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseDTOUserInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing access token",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreateRecordRequest": {
        "type": "object",
        "properties": {
          "rate": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "ApiResponseDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "ApiResponseDTORecordDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/RecordDTO"
          }
        }
      },
      "RecordDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "rate": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateQuestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ApiResponseDTOUserQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UserQuestsDTO"
          }
        }
      },
      "UserQuestsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEDITATE",
              "ACTIVITY",
              "EMOTION"
            ]
          },
          "progress": {
            "type": "integer",
            "format": "int32"
          },
          "target": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DiagnosisResultSubmitRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "scale": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiResponseDTODiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/DiagnosisResultDTO"
          }
        }
      },
      "DiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "diagnosisId": {
            "type": "integer",
            "format": "int64"
          },
          "result": {
            "type": "integer",
            "format": "int32"
          },
          "scale": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RecordUpdateRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "rate": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "UpdateQuestRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "current": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "user_name": {
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "description": "Birth date in format yyyy-MM-dd",
            "example": "2000-01-01"
          }
        }
      },
      "ApiResponseDTOUpdateUserResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UpdateUserResponse"
          }
        }
      },
      "UpdateUserResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birthDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "user_name": {
            "type": "string"
          },
          "birth_date": {
            "type": "string",
            "description": "Birth date in format yyyy-MM-dd",
            "example": "2000-01-01"
          }
        }
      },
      "ApiResponseDTOSignUpResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/SignUpResponse"
          }
        }
      },
      "SignUpResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "TokenRefreshRequest": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "ApiResponseDTOTokenRefreshResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/TokenRefreshResponse"
          }
        }
      },
      "TokenRefreshResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "LogoutRequest": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "ApiResponseDTOString": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "ApiResponseDTOLoginResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/LoginResponse"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "ApiResponseDTOListUserQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserQuestsDTO"
            }
          }
        }
      },
      "ApiResponseDTOListQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestsDTO"
            }
          }
        }
      },
      "QuestsDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "MEDITATE",
              "ACTIVITY",
              "EMOTION"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "target": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseDTOQuestsDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/QuestsDTO"
          }
        }
      },
      "ApiResponseDTODiagnosisDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/DiagnosisDTO"
          }
        }
      },
      "DiagnosisDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "enum": [
              "Simple",
              "PHQ_9",
              "BDI"
            ]
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisQuestionDTO"
            }
          },
          "scale": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisScaleDTO"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DiagnosisQuestionDTO": {
        "type": "object",
        "properties": {
          "seq": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisTextDTO"
            }
          }
        }
      },
      "DiagnosisScaleDTO": {
        "type": "object",
        "properties": {
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "scaleName": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "DiagnosisTextDTO": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ApiResponseDTOListDiagnosisResultDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisResultDTO"
            }
          }
        }
      },
      "ApiResponseDTOListDiagnosisDTO": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiagnosisDTO"
            }
          }
        }
      },
      "ApiResponseDTOUserInfoResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "$ref": "#/components/schemas/UserInfoResponse"
          }
        }
      },
      "UserInfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "username": {
            "type": "string"
          },
          "gender": {
            "type": "string",
            "enum": [
              "MALE",
              "FEMALE",
              "THIRD_GENDER",
              "UNKNOWN"
            ]
          },
          "birthDate": {
            "type": "string",
            "format": "date"
          }
        }
      }
    },
    "securitySchemes": {
      "api token": {
        "type": "http",
        "name": "api token",
        "scheme": "bearer"
      }
    }
  }
}